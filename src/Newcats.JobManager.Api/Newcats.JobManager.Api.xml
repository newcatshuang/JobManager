<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newcats.JobManager.Api</name>
    </assembly>
    <members>
        <member name="T:Newcats.JobManager.Api.AppData.ApiControllerBase">
            <summary>
            Api控制器基类
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToSuccessResult">
            <summary>
            返回成功Json结果(默认数据为:res.Code=0,res.Message="success",res.Data=null)
            </summary>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToSuccessResult(System.String)">
            <summary>
            返回成功Json结果(默认数据为:res.Code=0,res.Message=message,res.Data=null)
            </summary>
            <param name="message">提示消息</param>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToSuccessResult(System.Object)">
            <summary>
            返回成功Json结果(默认数据为:res.Code=0,res.Message="success",res.Data=data)
            </summary>
            <param name="data">数据</param>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToSuccessResult(System.String,System.Object)">
            <summary>
            返回成功Json结果(默认数据为:res.Code=0,res.Message=message,res.Data=data)
            </summary>
            <param name="message">提示消息</param>
            <param name="data">数据</param>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToFailResult">
            <summary>
            返回失败Json结果(默认数据为:res.Code=-1,res.Message="failed",res.Data=null)
            </summary>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToFailResult(System.String)">
            <summary>
            返回失败Json结果(默认数据为:res.Code=-1,res.Message=message,res.Data=null)
            </summary>
            <param name="message">提示消息</param>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToFailResult(System.Int32,System.String)">
            <summary>
            返回失败Json结果(默认数据为:res.Code=code,res.Message=message,res.Data=null)
            </summary>
            <param name="code">代码，一般code=0表示成功</param>
            <param name="message">提示消息</param>
            <returns>Json结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.AppData.ApiControllerBase.ToBaseResult(System.Int32,System.String,System.Object)">
            <summary>
            返回Json结果基本返回类型,结果分别为:res.Code,res.Message,res.Data
            </summary>
            <param name="code">代码，一般code=0表示成功</param>
            <param name="message">提示消息</param>
            <param name="data">数据</param>
            <returns>Json结果</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Controllers.JobController">
            <summary>
            Job管理控制器
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.GetJob(System.Int32)">
            <summary>
            根据主键Id,获取一个JobInfo实体
            </summary>
            <param name="id">主键Id</param>
            <returns>JobInfo实体</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.GetJobList(Newcats.JobManager.Api.Models.Requests.JobListRequest)">
            <summary>
            根据搜索条件，分页获取JobInfo实体
            </summary>
            <param name="request">搜索条件</param>
            <returns>JobInfo实体集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.AddJob(Newcats.JobManager.Api.Domain.Entity.JobInfoEntity)">
            <summary>
            新增一条JobInfo记录
            </summary>
            <param name="jobInfo">JobInfo实体</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.ModifyJob(Newcats.JobManager.Api.Domain.Entity.JobInfoEntity)">
            <summary>
            更新给定的JobInfo记录
            </summary>
            <param name="jobInfo">JobInfo实体</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.GetLatestJobLogs(System.Int32)">
            <summary>
            根据JobId获取最新的20条日志记录
            </summary>
            <param name="jobId">主键JobId</param>
            <returns>JobLogEntity集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.EnableJob(System.Int32)">
            <summary>
            根据JobId,启用Job
            </summary>
            <param name="jobId">JobId</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.DisableJob(System.Int32)">
            <summary>
            根据JobId,禁用Job
            </summary>
            <param name="jobId">JobId</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.StartJob(System.Int32)">
            <summary>
            根据JobId,启动Job
            </summary>
            <param name="jobId">JobId</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.StopJob(System.Int32)">
            <summary>
            根据JobId,停止Job
            </summary>
            <param name="jobId">JobId</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.FireNowJob(System.Int32)">
            <summary>
            根据JobId,立即执行一次此Job
            </summary>
            <param name="jobId">JobId</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传DLL文件，并保存在JobHost文件夹
            </summary>
            <param name="dllFile">文件</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Controllers.JobController.GetLogList(Newcats.JobManager.Api.Models.Requests.LogListRequest)">
            <summary>
            根据搜索条件，分页获取JobLog实体
            </summary>
            <param name="request">搜索条件</param>
            <returns>JobLog实体集合</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Domain.Entity.FireState">
            <summary>
            Job执行结果
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.FireState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.FireState.Failed">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.FireState.Error">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity">
            <summary>
            Job信息
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.Id">
            <summary>
            JobId(主键/自增)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.JobLevel">
            <summary>
            Job等级(0.业务，1.测试，2.系统)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.Name">
            <summary>
            Job名称
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.Description">
            <summary>
            Job描述
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.AssemblyName">
            <summary>
            程序集名称(所属程序集)(例:Newcats.JobManager.Host.exe)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.ClassName">
            <summary>
            类名(完整命名空间的类名)(例:Newcats.JobManager.Host.Manager.SystemJob)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.JobArgs">
            <summary>
            参数
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.CronExpression">
            <summary>
            Cron表达式
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.CronExpressionDescription">
            <summary>
            Cron表达式描述
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.LastFireTime">
            <summary>
            上次运行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.NextFireTime">
            <summary>
            下次运行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.FireCount">
            <summary>
            运行次数
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.State">
            <summary>
            状态(0.停止，1.运行中，3.启动中，5.停止中，7.等待更新，9.等待立即执行一次)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.Disabled">
            <summary>
            是否禁用
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.CreateId">
            <summary>
            创建人ID
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.CreateName">
            <summary>
            创建人姓名
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.CreateTime">
            <summary>
            创建时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.UpdateId">
            <summary>
            最后更新人ID
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.UpdateName">
            <summary>
            最后更新人姓名
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobInfoEntity.UpdateTime">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Domain.Entity.JobLevel">
            <summary>
            Job等级
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobLevel.Business">
            <summary>
            业务
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobLevel.Test">
            <summary>
            测试
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobLevel.System">
            <summary>
            系统
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Domain.Entity.JobLogEntity">
            <summary>
            Job执行日志
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.Id">
            <summary>
            LogId(主键/自增)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.JobId">
            <summary>
            JobId(表JobInfo.Id)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.FireTime">
            <summary>
            执行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.FireDuration">
            <summary>
            执行持续时长
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.FireState">
            <summary>
            执行结果(0.成功，1.失败，2.异常)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.Content">
            <summary>
            日志内容
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.JobLogEntity.CreateTime">
            <summary>
            创建时间
            </summary>				
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobState.Stopped">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobState.Running">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobState.Starting">
            <summary>
            启动中
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobState.Stopping">
            <summary>
            停止中
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobState.Updating">
            <summary>
            等待更新
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Domain.Entity.JobState.FireNow">
            <summary>
            等待立即执行
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.Id">
            <summary>
            LogId(主键/自增)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.JobId">
            <summary>
            JobId(主键/自增)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.JobName">
            <summary>
            Job名称
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.FireTime">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.FireDuration">
            <summary>
            执行耗时
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.FireState">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Domain.Entity.LogInfoEntity.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Domain.IService.IJobService.GetSystemMainJobAsync">
            <summary>
            获取系统主Job(承载其他Job的系统级Job，唯一)
            </summary>
            <returns>唯一的系统主Job</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Domain.IService.IJobService.ModifyJobAsync(Newcats.JobManager.Api.Domain.Entity.JobInfoEntity)">
            <summary>
            更新一个JobInfo记录
            </summary>
            <param name="jobInfoEntity">JobInfo记录</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Domain.IService.IJobService.GetLatestJobLogs(System.Int32,System.Int32)">
            <summary>
            获取指定数量的最新的JobLog日志记录
            </summary>
            <param name="jobId">jobId</param>
            <param name="top">需要获取的数量</param>
            <returns>JobLog集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Domain.Service.JobService.GetSystemMainJobAsync">
            <summary>
            获取系统主Job(承载其他Job的系统级Job，唯一)
            </summary>
            <returns>唯一的系统主Job</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Domain.Service.JobService.ModifyJobAsync(Newcats.JobManager.Api.Domain.Entity.JobInfoEntity)">
            <summary>
            更新一个JobInfo记录
            </summary>
            <param name="jobInfoEntity">JobInfo记录</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Domain.Service.JobService.GetLatestJobLogs(System.Int32,System.Int32)">
            <summary>
            获取指定数量的最新的JobLog日志记录
            </summary>
            <param name="top">需要获取的数量</param>
            <param name="jobId">jobId</param>
            <returns>JobLog集合</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.DbHelper">
            <summary>
            DbParameter帮助类
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbHelper.GetWhereDynamicParameter``1(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{``0}},System.String@)">
            <summary>
            把DbWhere参数数组转换成DynamicParameters参数，并且输出sql where语句（不包含【WHERE】关键字）
            </summary>
            <typeparam name="TEntity">数据库实体类</typeparam>
            <param name="dbWheres">DbWhere参数数组</param>
            <param name="sqlWhere">不包含【WHERE】和【WHERE 1=1】的sql where语句(例  AND Id=@pw_1 AND Age=@pw_2 )</param>
            <returns>DynamicParameters参数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbHelper.GetUpdateDynamicParameter``1(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{``0}},System.String@)">
            <summary>
            把DbUpdate参数数组转换成DynamicParameters参数，并且输出sql update语句（不包含【SET】关键字）
            </summary>
            <typeparam name="TEntity">数据库实体类</typeparam>
            <param name="dbUpdates">DbUpdate参数数组</param>
            <param name="sqlUpdate">不包含【SET】的sql update语句（例 Id=@pu,Age=@pu）</param>
            <returns>DynamicParameters参数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbHelper.GetOrderBySql``1(Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{``0}[])">
            <summary>
            解析DbOrderBy参数，输出sql order by语句（不包含【ORDER BY】关键字）
            </summary>
            <typeparam name="TEntity">数据库实体类</typeparam>
            <param name="dbOrderBy">DbOrderBy参数</param>
            <returns>sql order by语句（不包含【ORDER BY】关键字）</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.LogicType">
            <summary>
            连接逻辑
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.LogicType.And">
            <summary>
            where语句之间用and连接
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.LogicType.Or">
            <summary>
            where语句之间用or连接
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType">
            <summary>
            操作逻辑
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.Equal">
            <summary>
            相等
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.NotEqual">
            <summary>
            不相等
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.Like">
            <summary>
            like
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.LeftLike">
            <summary>
            LeftLike
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.RightLike">
            <summary>
            RightLike
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.NotLike">
            <summary>
            NotLike
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.NotIn">
            <summary>
            NotIn
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.Between">
            <summary>
            Between
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.End">
            <summary>
            End
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType.SqlText">
            <summary>
            直接拼接sql语句.
            sql写在第二个参数value处.
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.SortType.ASC">
            <summary>
            正序
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.SortType.DESC">
            <summary>
            倒序
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere`1">
            <summary>
            数据库sql where参数封装类
            封装了sql逻辑，便于生成sql语句
            </summary>
            <typeparam name="TEntity">数据库实体类</typeparam>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere`1.PropertyName">
            <summary>
            属性名（即数据库表的字段名）
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere`1.Value">
            <summary>
            对应字段的值
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere`1.OperateType">
            <summary>
            操作逻辑
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere`1.LogicType">
            <summary>
            连接逻辑（and/or）
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,Newcats.JobManager.Api.Infrastructure.DataAccess.OperateType,Newcats.JobManager.Api.Infrastructure.DataAccess.LogicType)">
            <summary>
            数据库sql where参数封装类
            </summary>
            <param name="expression">表达式，例u=>u.Id</param>
            <param name="value">表达式的值</param>
            <param name="operateType">操作逻辑</param>
            <param name="logicType">连接逻辑</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate`1">
            <summary>
            数据库sql update参数的封装类
            封装了sql逻辑，便于生成sql语句
            </summary>
            <typeparam name="TEntity">数据库实体类</typeparam>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate`1.PropertyName">
            <summary>
            属性名（即数据库表的字段名）
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate`1.Value">
            <summary>
            对应字段的值
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            数据库sql update参数的封装类
            </summary>
            <param name="expression">表达式，例u=>u.Id</param>
            <param name="value">表达式的值</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy`1">
            <summary>
            数据库sql order by参数的封装类
            封装了sql逻辑，便于生成sql语句
            </summary>
            <typeparam name="TEntity">数据库实体类</typeparam>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy`1.PropertyName">
            <summary>
            属性名（即数据库表的字段名）
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy`1.OrderByType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Newcats.JobManager.Api.Infrastructure.DataAccess.SortType)">
            <summary>
            数据库sql order by参数的封装类
            </summary>
            <param name="expression">表达式，例u=>u.Id</param>
            <param name="orderByType">SortType.ASC/SortType.DESC</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy`1.#ctor(System.String,System.Boolean)">
            <summary>
            数据库sql order by参数的封装类
            </summary>
            <param name="propertyName">属性名（即数据库表的字段名）</param>
            <param name="isAsc">是否升序</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.TableNameAttribute">
            <summary>
            数据库表名(例User)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.TableNameAttribute.Name">
            <summary>
            表名(例User)
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.TableNameAttribute.#ctor(System.String)">
            <summary>
            对应的数据库表(例User)
            </summary>
            <param name="name">表名(例User)</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.RealColumnAttribute">
            <summary>
            如果当前实体对应的数据库表为表连接，则通过此特性标明真实的数据库字段（例User.Id）
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.RealColumnAttribute.ColumnName">
            <summary>
            真实的数据库字段（例User.Id）
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.RealColumnAttribute.#ctor(System.String)">
            <summary>
            如果当前实体对应的数据库表为表连接，则通过此特性标明真实的数据库字段（例User.Id）
            </summary>
            <param name="columnName">真实的数据库字段（例User.Id）</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.PrimaryKeyAttribute">
            <summary>
            数据库表主键标识
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.AutoIncrementAttribute">
            <summary>
            数据库表主键自动增长标识
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.NotTableFieldAttribute">
            <summary>
            类的属性不属于数据库表
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DataAccess.IEntity">
            <summary>
            标记接口，无实现
            所有与数据库交互的类都必须实现此接口
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2" -->
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Connection">
            <summary>
            1.数据库链接,在构造函数初始化(默认链接为"DefaultConnection")。
            2.若要使用非默认的数据库链接，请重新赋值。
            3.一般在Service类的构造函数赋值_repository.Connection=_repository.CreateDbConnection("OtherDB")。
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.CreateDbConnection(System.String)">
            <summary>
            1.根据 [/Config/ConnectionString.json] 配置文件里的连接字符串创建数据库链接
            2.会在构造函数自动调用并赋值，不需要手动调用，除非需要使用非默认的数据库链接
            </summary>
            <param name="key">链接字符串名，默认为"DefaultConnection"</param>
            <returns>数据库链接</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Insert(`0,System.Nullable{System.Int32})">
            <summary>
            插入一条数据，成功时返回当前主键的值，否则返回主键类型的默认值
            </summary>
            <param name="entity">要插入的数据实体</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功时返回当前主键的值，否则返回主键类型的默认值</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.InsertBulk(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            批量插入数据，返回成功的条数
            </summary>
            <param name="list">要插入的数据实体集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Delete(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，删除一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Delete(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，删除记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Update(`1,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据主键，更新一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Update(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，更新记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Get(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，获取一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Get(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件，获取一条记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序集合</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetPage(System.Int32,System.Int32,System.Int32@,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，分页获取数据
            </summary>
            <param name="pageIndex">页码索引（从0开始）（pageIndex小于等于0，返回第0页数据）</param>
            <param name="pageSize">页大小(pageSize小于等于0，返回所有数据)</param>
            <param name="totalCount">当前条件下的总记录数</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetAll">
            <summary>
            获取所有数据
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetAll(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取所有数据
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetTop(System.Int32)">
            <summary>
            根据默认排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetTop(System.Int32,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Count">
            <summary>
            获取记录总数量
            </summary>
            <returns>记录总数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Count(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，获取记录数量
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Exists(`1)">
            <summary>
            根据主键，判断数据是否存在
            </summary>
            <param name="primaryKeyValue">主键值</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Exists(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，判断数据是否存在
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteStoredProcedure(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32})">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcedureName">存储过程名称</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Execute(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql语句，返回受影响的行数
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteScalar``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteScalar(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.Query``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，返回结果集
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果集</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.QueryFirstOrDefault``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行单行查询，返回结果
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.InsertAsync(`0,System.Nullable{System.Int32})">
            <summary>
            插入一条数据，成功时返回当前主键的值，否则返回主键类型的默认值
            </summary>
            <param name="entity">要插入的数据实体</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功时返回当前主键的值，否则返回主键类型的默认值</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.InsertBulkAsync(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            批量插入数据，返回成功的条数
            </summary>
            <param name="list">要插入的数据实体集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.DeleteAsync(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，删除一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，删除记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.UpdateAsync(`1,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据主键，更新一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，更新记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetAsync(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，获取一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件，获取一条记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序集合</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetPageAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，分页获取数据
            </summary>
            <param name="pageIndex">页码索引（从0开始）（pageIndex小于0，返回第0页数据）</param>
            <param name="pageSize">页大小(pageSize小于等于0，返回所有数据)</param>
            <param name="totalCount">当前条件下的总记录数</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetAllAsync">
            <summary>
            获取所有数据
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetAllAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取所有数据
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetTopAsync(System.Int32)">
            <summary>
            根据默认排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.GetTopAsync(System.Int32,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.CountAsync">
            <summary>
            获取记录总数量
            </summary>
            <returns>记录总数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.CountAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，获取记录数量
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExistsAsync(`1)">
            <summary>
            根据主键，判断数据是否存在
            </summary>
            <param name="primaryKeyValue">主键值</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExistsAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，判断数据是否存在
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteStoredProcedureAsync(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32})">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcedureName">存储过程名称</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteAsync(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql语句，返回受影响的行数
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteScalarAsync``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.ExecuteScalarAsync(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.QueryAsync``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，返回结果集
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果集</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.IRepository`2.QueryFirstOrDefaultAsync``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行单行查询，返回结果
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2" -->
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.#ctor">
            <summary>
            构造函数，初始化Connection/EntityType属性并赋值
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Connection">
            <summary>
            1.数据库连接,在构造函数初始化(默认连接为"DefaultConnection")。
            2.若要使用非默认的数据库连接，请重新赋值。
            3.一般在Service类的构造函数赋值_repository.Connection=_repository.CreateDbConnection("OtherDB")。
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.CreateDbConnection(System.String)">
            <summary>
            1.根据应用程序执行目录下的appsettings.json配置文件(默认ConnectionStrings:DefaultConnection)的连接字符串创建数据库连接
            2.会在构造函数自动调用并赋值，不需要手动调用，除非需要使用非默认的数据库连接
            </summary>
            <param name="key">连接字符串名，默认为"DefaultConnection"</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetConnectionString(System.String)">
            <summary>
            1.获取应用程序执行目录下的appsettings.json配置文件(默认ConnectionStrings:DefaultConnection)里的连接字符串
            2.此处有缓存，如果更改了配置文件，请重新启动应用程序
            </summary>
            <param name="key">连接字符串名称</param>
            <returns>解密之后的连接字符串</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Insert(`0,System.Nullable{System.Int32})">
            <summary>
            插入一条数据，成功时返回当前主键的值，否则返回主键类型的默认值
            </summary>
            <param name="entity">要插入的数据实体</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功时返回当前主键的值，否则返回主键类型的默认值</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.InsertBulk(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            批量插入数据，返回成功的条数
            </summary>
            <param name="list">要插入的数据实体集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Delete(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，删除一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Delete(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，删除记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Update(`1,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据主键，更新一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Update(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，更新记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Get(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，获取一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Get(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件，获取一条记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序集合</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetPage(System.Int32,System.Int32,System.Int32@,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，分页获取数据
            </summary>
            <param name="pageIndex">页码索引（从0开始）（pageIndex小于等于0，返回第0页数据）</param>
            <param name="pageSize">页大小(pageSize小于等于0，返回所有数据)</param>
            <param name="totalCount">当前条件下的总记录数</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetAll">
            <summary>
            获取所有数据
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetAll(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取所有数据
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTop(System.Int32)">
            <summary>
            根据默认排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTop(System.Int32,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Count">
            <summary>
            获取记录总数量
            </summary>
            <returns>记录总数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Count(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，获取记录数量
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Exists(`1)">
            <summary>
            根据主键，判断数据是否存在
            </summary>
            <param name="primaryKeyValue">主键值</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Exists(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，判断数据是否存在
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteStoredProcedure(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32})">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcedureName">存储过程名称</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Execute(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql语句，返回受影响的行数
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteScalar``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteScalar(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.Query``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，返回结果集
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果集</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.QueryFirstOrDefault``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行单行查询，返回结果
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.InsertAsync(`0,System.Nullable{System.Int32})">
            <summary>
            插入一条数据，成功时返回当前主键的值，否则返回主键类型的默认值
            </summary>
            <param name="entity">要插入的数据实体</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功时返回当前主键的值，否则返回主键类型的默认值</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.InsertBulkAsync(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            批量插入数据，返回成功的条数
            </summary>
            <param name="list">要插入的数据实体集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.DeleteAsync(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，删除一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.DeleteAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，删除记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.UpdateAsync(`1,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据主键，更新一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.UpdateAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbUpdate{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，更新记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="dbUpdates">要更新的字段集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>成功的条数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetAsync(`1,System.Nullable{System.Int32})">
            <summary>
            根据主键，获取一条记录
            </summary>
            <param name="primaryKeyValue">主键的值</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件，获取一条记录
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序集合</param>
            <returns>数据库实体或null</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetPageAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，分页获取数据
            </summary>
            <param name="pageIndex">页码索引（从0开始）（pageIndex小于等于0，返回第0页数据）</param>
            <param name="pageSize">页大小(pageSize小于等于0，返回所有数据)</param>
            <param name="totalCount">当前条件下的总记录数</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetAllAsync">
            <summary>
            获取所有数据
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetAllAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取所有数据
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTopAsync(System.Int32)">
            <summary>
            根据默认排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTopAsync(System.Int32,System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32},Newcats.JobManager.Api.Infrastructure.DataAccess.DbOrderBy{`0}[])">
            <summary>
            根据给定的条件及排序，获取指定数量的数据
            </summary>
            <param name="top">指定数量</param>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="dbOrderBy">排序</param>
            <returns>指定数量的数据集合</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.CountAsync">
            <summary>
            获取记录总数量
            </summary>
            <returns>记录总数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.CountAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，获取记录数量
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExistsAsync(`1)">
            <summary>
            根据主键，判断数据是否存在
            </summary>
            <param name="primaryKeyValue">主键值</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExistsAsync(System.Collections.Generic.IEnumerable{Newcats.JobManager.Api.Infrastructure.DataAccess.DbWhere{`0}},System.Nullable{System.Int32})">
            <summary>
            根据给定的条件，判断数据是否存在
            </summary>
            <param name="dbWheres">条件集合</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteStoredProcedureAsync(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32})">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcedureName">存储过程名称</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteAsync(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql语句，返回受影响的行数
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteScalarAsync``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.ExecuteScalarAsync(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，并返回由查询返回的结果集中的第一行的第一列，其他行或列将被忽略
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.QueryAsync``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询，返回结果集
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果集</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.QueryFirstOrDefaultAsync``1(System.String,Dapper.DynamicParameters,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行单行查询，返回结果
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sqlText">sql语句</param>
            <param name="pars">参数</param>
            <param name="commandTimeout">超时时间(单位：秒)</param>
            <param name="commandType">执行类型，默认为CommandType.Text</param>
            <returns>查询结果</returns>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2._connStrDic">
            <summary>
            解密后的数据库连接字符串字典
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2._sqlInsertDic">
            <summary>
            实体类对应的insert语句字典，键为实体类全名（命名空间+类名+插入？批量插入？）
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2._tableNameDic">
            <summary>
            实体类对应的数据库表名字典，键为实体类全名（命名空间+类名）
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2._tableFieldsDic">
            <summary>
            实体类包含的所有有效字段的字典，键为实体类全名（命名空间+类名+插入?查询?）
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2._tablePrimaryKeyDic">
            <summary>
            实体类对应的数据库表的主键名，键为实体类全名（命名空间+类名）
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTableName(System.Type)">
            <summary>
            获取实体类的表名
            获取优先级为：
            1.获取TableName特性的表名
            2.若类名以Entity结尾，则获取类名（去除Entity名称）
            3.前面都不满足，则直接获取类名
            </summary>
            <param name="type">实体类型</param>
            <returns>数据库表名</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTableFieldsInsert(System.Type)">
            <summary>
            获取实体表的所有字段（insert语句时使用）(实体类的属性应与表的字段完全一致)（表连接查询时的查询字段才会判断RealColumn特性）
            1.排除NotTable特性的字段
            2.排除AutoIncrement特性的字段（自增字段）
            </summary>
            <param name="type">实体类型</param>
            <returns>数据库表字段(逗号(,)分割)</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTableFieldsQuery(System.Type)">
            <summary>
            获取实体表的所有字段（select语句时使用）(单表实体类的属性应与表的字段完全一致)（表连接查询时的查询字段会判断RealColumn特性）
            1.排除NotTable特性的字段
            2.表连接查询时请为每个属性使用RealColumn特性，否则会直接使用属性名
            </summary>
            <param name="type">实体类型</param>
            <returns>数据库表字段(逗号(,)分割)</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DataAccess.Repository`2.GetTablePrimaryKey(System.Type)">
            <summary>
            获取实体表的主键
            获取优先级为：
            1.获取PrimaryKey特性的字段
            2.获取字段名为id的字段（忽略大小写）
            3.获取字段为以id结尾的字段（忽略大小写）
            </summary>
            <param name="type">实体类型</param>
            <returns>数据库表的主键</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.AutofacExtensions">
            <summary>
            Autofac扩展
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.AutofacExtensions.AddTransient``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerDependency(每次创建一个新实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.AutofacExtensions.AddScoped``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.AutofacExtensions.AddScoped``1(Autofac.ContainerBuilder)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.AutofacExtensions.AddSingleton``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 SingleInstance（单例）
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.AutofacExtensions.AddSingleton``1(Autofac.ContainerBuilder,``0)">
            <summary>
            注册服务，生命周期为 SingleInstance（单例）
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="instance">服务实例</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container">
            <summary>
            Autofac对象容器
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container._container">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.Create``1(System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.GetServiceFromHttpContext(System.Type,System.String)">
            <summary>
            从HttpContext获取服务
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.GetService(System.Type,System.String)">
            <summary>
            获取服务
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.Register(Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            创建容器生成器
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前执行的操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Container.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration._configs">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration._builder">
            <summary>
            容器生成器
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration._finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration._assemblies">
            <summary>
            程序集列表
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            初始化依赖配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.Config">
            <summary>
            配置依赖
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.RegistServices(Autofac.ContainerBuilder)">
            <summary>
            注册服务集合
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.RegistInfrastracture">
            <summary>
            注册基础设施
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.RegistFinder">
            <summary>
            注册类型查找器
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.RegistContext">
            <summary>
            注册上下文
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.RegistDependency">
            <summary>
            查找并注册依赖
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.GetTypes``1">
            <summary>
            获取类型集合
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.DependencyConfiguration.GetTypes(System.Type)">
            <summary>
            获取类型集合
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.Register(Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContainer.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc">
            <summary>
            Ioc容器
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.DefaultContainer">
            <summary>
            默认容器
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.CreateContainer(Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            创建容器
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.CreateList``1(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.Create``1(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.Register(Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Ioc.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IScope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IScope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IScope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.IScopeDependency">
            <summary>
            依赖注入标记接口
            在同一个Scope内只初始化一个实例 ，可以理解为（ 每一个request级别只创建一个实例，同一个http request会在一个 scope内）
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.ISingletonDependency">
            <summary>
            依赖注入标记接口
            整个应用程序生命周期以内只创建一个实例
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.ITransientDependency">
            <summary>
            依赖注入标记接口
            每一次GetService都会创建一个新的实例
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Scope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Scope._scope">
            <summary>
            autofac作用域
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Scope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            初始化作用域
            </summary>
            <param name="scope">autofac作用域</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Scope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Scope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Scope.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.ServiceCollectionExtensions.AddAutofac(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Autofac依赖注入服务,默认注册Dapper仓储
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Web">
            <summary>
            Web操作
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Web.#cctor">
            <summary>
            初始化Web操作
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Web.HttpContextAccessor">
            <summary>
            Http上下文访问器
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.Web.HttpContext">
            <summary>
            当前Http上下文
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.WebContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.WebContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.WebContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.DenpendencyInjection.WebContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings">
            <summary>
            应用程序执行目录下的appsettings.json配置文件
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.GetConnectionString(System.String)">
            <summary>
            Shorthand for GetSection("ConnectionStrings")[name].
            </summary>
            <param name="name">The connection string key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.GetSection(System.String)">
            <summary>
            Gets a configuration sub-section with the specified key.
            </summary>
            <param name="key">The key of the configuration section.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.</returns>
            <remarks>
                This method will never return <c>null</c>. If no matching sub-section is found with the specified key,
                an empty <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> will be returned.
            </remarks>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.Get``1">
            <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
            <typeparam name="T">The type of the new instance to bind.</typeparam>
            <param name="configuration">The configuration instance to bind.</param>
            <returns>The new instance of T if successful, default(T) otherwise.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.GetValue``1(System.String)">
            <summary>
            Extracts the value with the specified key and converts it to type T.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="key">The key of the configuration section's value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConfigHelper.AppSettings.GetValue``1(System.String,``0)">
            <summary>
            Extracts the value with the specified key and converts it to type T.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="key">The key of the configuration section's value to convert.</param>
            <param name="defaultValue">The default value to use if no value is found.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.ConvertHelper.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Second">
            <summary>
            Field specification for second.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Minute">
            <summary>
            Field specification for minute.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Hour">
            <summary>
            Field specification for hour.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.DayOfMonth">
            <summary>
            Field specification for day of month.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Month">
            <summary>
            Field specification for month.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.DayOfWeek">
            <summary>
            Field specification for day of week.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Year">
            <summary>
            Field specification for year.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.AllSpecInt">
            <summary>
            Field specification for all wildcard value '*'.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.NoSpecInt">
            <summary>
            Field specification for not specified value '?'.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.AllSpec">
            <summary>
            Field specification for wildcard '*'.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.NoSpec">
            <summary>
            Field specification for no specification at all '?'.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.seconds">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.minutes">
            <summary>
            minutes.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.hours">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.daysOfMonth">
            <summary>
            Days of month.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.months">
            <summary>
            Months.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.daysOfWeek">
            <summary>
            Days of week.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.years">
            <summary>
            Years.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.lastdayOfWeek">
            <summary>
            Last day of week.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.nthdayOfWeek">
            <summary>
            Nth day of week.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.lastdayOfMonth">
            <summary>
            Last day of month.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.nearestWeekday">
            <summary>
            Nearest weekday.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.calendardayOfWeek">
            <summary>
            Calendar day of week.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.calendardayOfMonth">
            <summary>
            Calendar day of month.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.expressionParsed">
            <summary>
            Expression parsed.
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.#ctor(System.String)">
            <summary>
             Constructs a new <see cref="P:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.CronExpressionString" /> based on the specified
             parameter.
             </summary>
             <param name="cronExpression">
             String representation of the cron expression the new object should represent
             </param>
             <see cref="P:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.CronExpressionString" />
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.IsSatisfiedBy(System.DateTimeOffset)">
            <summary>
            Indicates whether the given date satisfies the cron expression.
            </summary>
            <remarks>
            Note that  milliseconds are ignored, so two Dates falling on different milliseconds
            of the same second will always have the same result here.
            </remarks>
            <param name="dateUtc">The date to evaluate.</param>
            <returns>a boolean indicating whether the given date satisfies the cron expression</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetNextValidTimeAfter(System.DateTimeOffset)">
            <summary>
            Returns the next date/time <i>after</i> the given date/time which
            satisfies the cron expression.
            </summary>
            <param name="date">the date/time at which to begin the search for the next valid date/time</param>
            <returns>the next valid date/time</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetNextInvalidTimeAfter(System.DateTimeOffset)">
            <summary>
            Returns the next date/time <i>after</i> the given date/time which does
            <i>not</i> satisfy the expression.
            </summary>
            <param name="date">the date/time at which to begin the search for the next invalid date/time</param>
            <returns>the next valid date/time</returns>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.TimeZone">
            <summary>
            Sets or gets the time zone for which the <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression" /> of this
            <see cref="!:ICronTrigger" /> will be resolved.
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.ToString">
            <summary>
            Returns the string representation of the <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression" />
            </summary>
            <returns>The string representation of the <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression" /></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.IsValidExpression(System.String)">
            <summary>
            Indicates whether the specified cron expression can be parsed into a
            valid cron expression
            </summary>
            <param name="cronExpression">the expression to evaluate</param>
            <returns>a boolean indicating whether the given expression is a valid cron
                    expression</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.BuildExpression(System.String)">
            <summary>
            Builds the expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.StoreExpressionVals(System.Int32,System.String,System.Int32)">
            <summary>
            Stores the expression values.
            </summary>
            <param name="pos">The position.</param>
            <param name="s">The string to traverse.</param>
            <param name="type">The type of value.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.CheckNext(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Checks the next value.
            </summary>
            <param name="pos">The position.</param>
            <param name="s">The string to check.</param>
            <param name="val">The value.</param>
            <param name="type">The type to search.</param>
            <returns></returns>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.CronExpressionString">
            <summary>
            Gets the cron expression string.
            </summary>
            <value>The cron expression string.</value>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetExpressionSummary">
            <summary>
            Gets the expression summary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetExpressionSetSummary(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Gets the expression set summary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.SkipWhiteSpace(System.Int32,System.String)">
            <summary>
            Skips the white space.
            </summary>
            <param name="i">The i.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.FindNextWhiteSpace(System.Int32,System.String)">
            <summary>
            Finds the next white space.
            </summary>
            <param name="i">The i.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.AddToSet(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds to set.
            </summary>
            <param name="val">The val.</param>
            <param name="end">The end.</param>
            <param name="incr">The incr.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetSet(System.Int32)">
            <summary>
            Gets the set of given type.
            </summary>
            <param name="type">The type of set to get.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetValue(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the value.
            </summary>
            <param name="v">The v.</param>
            <param name="s">The s.</param>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetNumericValue(System.String,System.Int32)">
            <summary>
            Gets the numeric value from string.
            </summary>
            <param name="s">The string to parse from.</param>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetMonthNumber(System.String)">
            <summary>
            Gets the month number.
            </summary>
            <param name="s">The string to map with.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetDayOfWeekNumber(System.String)">
            <summary>
            Gets the day of week number.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the time from given time parts.
            </summary>
            <param name="sc">The seconds.</param>
            <param name="mn">The minutes.</param>
            <param name="hr">The hours.</param>
            <param name="dayofmn">The day of month.</param>
            <param name="mon">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetTimeAfter(System.DateTimeOffset)">
            <summary>
            Gets the next fire time after the given time.
            </summary>
            <param name="afterTimeUtc">The UTC time to start searching from.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.CreateDateTimeWithoutMillis(System.DateTimeOffset)">
            <summary>
            Creates the date time without milliseconds.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.SetCalendarHour(System.DateTimeOffset,System.Int32)">
            <summary>
            Advance the calendar to the particular hour paying particular attention
            to daylight saving problems.
            </summary>
            <param name="date">The date.</param>
            <param name="hour">The hour.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetTimeBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets the time before.
            </summary>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetFinalFireTime">
            <summary>
            NOT YET IMPLEMENTED: Returns the final time that the
            <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression" /> will match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.IsLeapYear(System.Int32)">
            <summary>
            Determines whether given year is a leap year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            	<c>true</c> if the specified year is a leap year; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetLastDayOfMonth(System.Int32,System.Int32)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="monthNum">The month num.</param>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Equals(Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression)">
            <summary>
            Determines whether the specified <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression"/> is equal to the current <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression"/> is equal to the current <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression"/> to compare with the current <see cref="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression"/>. </param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.CronExpression.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.ValueSet">
            <summary>
            Helper class for cron expression handling.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.ValueSet.theValue">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.ValueSet.pos">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.SystemTime.UtcNow">
            <summary>
            Return current UTC time via <see cref="T:System.Func`1" />. Allows easier unit testing.
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.SystemTime.Now">
            <summary>
            Return current time in current time zone via <see cref="T:System.Func`1" />. Allows easier unit testing.
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.TimeZoneUtil.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            TimeZoneInfo.ConvertTime is not supported under mono
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="timeZoneInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.TimeZoneUtil.GetUtcOffset(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            TimeZoneInfo.GetUtcOffset(DateTimeOffset) is not supported under mono
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="timeZoneInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.CronHelper.TimeZoneUtil.FindTimeZoneById(System.String)">
            <summary>
            Tries to find time zone with given id, has ability do some fallbacks when necessary.
            </summary>
            <param name="id">System id of the time zone.</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.EnumHelper.ConvertToList``1">
            <summary>
            把枚举对象的每一项转换成对应的类
            </summary>
            <typeparam name="T">要转换的枚举对象</typeparam>
            <returns></returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Helper.EnumberEntity">
            <summary>
            枚举项转换的类
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Helper.EnumberEntity.EnumValue">
            <summary>  
            枚举项的值  
            </summary>  
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Helper.EnumberEntity.EnumName">
            <summary>  
            枚举项的名称  
            </summary>  
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Helper.EnumberEntity.Description">
            <summary>  
            枚举项的描述  
            </summary>  
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.HttpHelper.GetIP(Microsoft.AspNetCore.Http.HttpContext,System.Boolean)">
            <summary>
            获取当前页面客户端的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.SkipAssemblies">
            <summary>
            跳过的程序集
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.GetAssembliesFromCurrentAppDomain">
            <summary>
            从当前应用程序域获取程序集列表
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.Match(System.Reflection.Assembly)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.LoadAssemblies(System.String)">
            <summary>
            加载程序集到当前应用程序域
            </summary>
            <param name="path">目录绝对路径</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.Match(System.String)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.GetTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型列表
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.AddType(System.Collections.Generic.List{System.Type},System.Type,System.Type)">
            <summary>
            添加类型
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.Finder.MatchGeneric(System.Type,System.Type)">
            <summary>
            泛型匹配
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.IFind">
            <summary>
            类型查找器
            引用自dotnet core开源项目Util
            作者:何镇汐
            https://github.com/dotnetcore/Util/blob/master/src/Util/Reflections/IFind.cs
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.IFind.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.IFind.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.IFind.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.WebFinder">
            <summary>
            Web类型查找器
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Helper.Reflection.WebFinder.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Text.CollectionExtensions">
            <summary>
            集合类型扩展方法
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newcats.JobManager.Api.Infrastructure.Text.CollectionExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Newcats.JobManager.Api.Infrastructure.Text.CollectionExtensions.ToList``1(System.Data.DataTable)" -->
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.CollectionExtensions.IsNullable(System.Type)">
            <summary>
            Determine of specified type is nullable
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.CollectionExtensions.GetCoreType(System.Type)">
            <summary>
            Return underlying type if type is Nullable otherwise return the type
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt">
            <summary>
            加密操作
            说明：
            1. AES加密整理自支付宝SDK
            2. RSA加密采用 https://github.com/stulzq/DotnetCore.RSA/blob/master/DotnetCore.RSA/RSAHelper.cs
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.GetRandomString(System.Int32)">
            <summary>
            获取指定长度的随机数字/字母组成的字符串
            </summary>
            <param name="length">字符串长度</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.GetRandomNumber(System.Int32)">
            <summary>
            获取指定长度的随机数字组成的字符串
            </summary>
            <param name="length">字符串长度</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.GetRandomKey(System.Int32)">
            <summary>
            获取指定长度的随机数字/字母/特殊字符组成的字符串(Salt)
            </summary>
            <param name="length">字符串长度</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.MD5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.MD5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.MD5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.MD5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACMD5(System.String,System.String)">
            <summary>
            HMACMD5 hash
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACMD5(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACMD5 hash
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha1(System.String,System.Text.Encoding)">
            <summary>
            SHA1加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha256(System.String)">
            <summary>
            SHA256加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha256(System.String,System.Text.Encoding)">
            <summary>
            SHA256加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha384(System.String)">
            <summary>
            SHA384加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha384(System.String,System.Text.Encoding)">
            <summary>
            SHA384加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha512(System.String)">
            <summary>
            SHA512加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Sha512(System.String,System.Text.Encoding)">
            <summary>
            SHA512加密
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA1(System.String,System.String)">
            <summary>
            HMAC_SHA1
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA1(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMAC_SHA1
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA256(System.String,System.String)">
            <summary>
            HMAC_SHA256 
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA256(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMAC_SHA256 
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA384(System.String,System.String)">
            <summary>
            HMAC_SHA384
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA384(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMAC_SHA384
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA512(System.String,System.String)">
            <summary>
            HMAC_SHA512
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.HMACSHA512(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMAC_SHA512
            </summary>
            <param name="str">The string to be encrypted</param>
            <param name="key">encrypte key</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESKey">
            <summary>
            DES密钥,24位字符串
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESEncrypt(System.Object)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESEncrypt(System.Object,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥,24位</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESEncrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥,24位</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.ValidateDes(System.String,System.String)">
            <summary>
            验证Des加密参数
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.CreateDesProvider(System.String)">
            <summary>
            创建Des加密服务提供程序
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.GetEncryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取加密结果
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESDecrypt(System.Object)">
            <summary>
            DES解密
            </summary>
            <param name="value">加密后的值</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESDecrypt(System.Object,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥,24位</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.DESDecrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥,24位</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.GetDecryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取解密结果
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt._iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.Iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESKey">
            <summary>
            AES密钥,32位字符串
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESEncrypt(System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESEncrypt(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥,32位字符串</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥,32位字符串</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.CreateRijndaelManaged(System.String)">
            <summary>
            创建RijndaelManaged
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESDecrypt(System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">加密后的值</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESDecrypt(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥,32位字符串</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.AESDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥,32位字符串</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.RSASign(System.String,System.String)">
            <summary>
            RSA加密，采用 SHA1 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥(公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的)</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.RSASign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA加密，采用 SHA1 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥(公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的)</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.RSA2Sign(System.String,System.String)">
            <summary>
            RSA加密，采用 SHA256 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥(公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的)</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.RSA2Sign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA加密，采用 SHA256 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥(公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的)</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding,Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RSAType)">
            <summary>
            Rsa加密
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RsaHelper">
            <summary>
            RSA加解密 使用OpenSSL的公钥加密/私钥解密
            
            公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的
            
            作者：李志强
            时间：2017年10月30日15:50:14
            QQ:501232752
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RsaHelper.#ctor(Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RSAType,System.Text.Encoding,System.String,System.String)">
            <summary>
            实例化RSAHelper
            </summary>
            <param name="rsaType">加密算法类型 RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>
            <param name="encoding">编码类型</param>
            <param name="privateKey">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RsaHelper.Sign(System.String)">
            <summary>
            使用私钥签名
            </summary>
            <param name="data">原始数据</param>
            <returns></returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RsaHelper.Verify(System.String,System.String)">
            <summary>
            使用公钥验证签名
            </summary>
            <param name="data">原始数据</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RSAType">
            <summary>
            RSA算法类型
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RSAType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.Encrypt.RSAType.SHA256">
            <summary>
            RSA2 密钥长度至少为2048
            SHA256
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="value">当前枚举项</param>
            <returns>Description特性描述</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert">
            <summary>
            Newtonsoft.Json的API封装
            不允许每个项目都独自引用Newtonsoft.Json，如需要其他方法，请自行在此封装
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.ToJson(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.Json.JsonExtensions.DeserializeJson(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Primary">
            <summary>
            Primary(#5867dd)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Success">
            <summary>
            Success(#34bfa3)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Warning">
            <summary>
            Warning(#ffb822)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Danger">
            <summary>
            Danger(#f4516c)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Metal">
            <summary>
            Metal(#c4c5d6)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Brand">
            <summary>
            Brand(#716aca)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Info">
            <summary>
            Info(#36a3f7)
            </summary>
        </member>
        <member name="F:Newcats.JobManager.Api.Infrastructure.Text.SpanColor.Focus">
            <summary>
            Focus(#9816f4)
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.StringExtensions.GetSpanHtml(System.String,Newcats.JobManager.Api.Infrastructure.Text.SpanColor)">
            <summary>
            根据枚举颜色，生成字符串的Span类型html标签
            </summary>
            <param name="str">字符串</param>
            <param name="color">颜色枚举</param>
            <returns>生成的span标签</returns>
        </member>
        <member name="M:Newcats.JobManager.Api.Infrastructure.Text.StringExtensions.GetSpanHtml(System.String,System.String)">
            <summary>
            根据给定的16进制颜色，生成字符串的Span类型html标签
            </summary>
            <param name="str">字符串</param>
            <param name="colorString">16进制颜色（#00c5dc）</param>
            <returns>生成的span标签</returns>
        </member>
        <member name="T:Newcats.JobManager.Api.Models.BaseResult">
            <summary>
            Json结果基本返回类型,结果分别为:res.Code,res.Message,res.Data
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.BaseResult.Code">
            <summary>
            代码，一般code=0表示成功
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.BaseResult.Message">
            <summary>
            提示消息
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.BaseResult.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Models.BaseResult.#ctor(System.Int32,System.String)">
            <summary>
            Json结果基本返回类型,结果分别为:res.Code,res.Message,res.Data
            </summary>
            <param name="code">代码，一般code=0表示成功</param>
            <param name="message">提示消息</param>
        </member>
        <member name="M:Newcats.JobManager.Api.Models.BaseResult.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Json结果基本返回类型,结果分别为:res.Code,res.Message,res.Data
            </summary>
            <param name="code">代码，一般code=0表示成功</param>
            <param name="message">提示消息</param>
            <param name="data">数据</param>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.Id">
            <summary>
            JobId(主键/自增)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.Name">
            <summary>
            Job名称
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.JobLevel">
            <summary>
            Job等级(0.业务，1.测试，2.系统)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.AssemblyName">
            <summary>
            程序集名称(所属程序集)(例:Newcats.JobManager.Host.exe)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.ClassName">
            <summary>
            类名(完整命名空间的类名)(例:Newcats.JobManager.Host.Manager.SystemJob)
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.CronExpression">
            <summary>
            Cron表达式
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.LastFireTimeStart">
            <summary>
            上次运行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.LastFireTimeEnd">
            <summary>
            上次运行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.NextFireTimeStart">
            <summary>
            下次运行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.NextFireTimeEnd">
            <summary>
            下次运行时间
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.State">
            <summary>
            状态(0.停止，1.运行中，3.启动中，5.停止中，7.等待更新，9.等待立即执行一次)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.JobListRequest.Disabled">
            <summary>
            是否禁用
            </summary>				
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.Id">
            <summary>
            LogId(主键/自增)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.JobId">
            <summary>
            JobId(主键/自增)
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.JobName">
            <summary>
            Job名称
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.FireTimeStart">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.FireTimeEnd">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.FireState">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.CreateTimeStart">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.LogListRequest.CreateTimeEnd">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Models.Requests.PageRequest">
            <summary>
            前端插件datatables.js的基本请求值
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.PageRequest.Draw">
            <summary>
            本次会话的请求次数
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.PageRequest.Start">
            <summary>
            跳过的数量
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.PageRequest.Length">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.PageRequest.Order">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.OrderByColumn.Column">
            <summary>
            排序的列对应的索引
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.Requests.OrderByColumn.Dir">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="T:Newcats.JobManager.Api.Models.TableResult">
            <summary>
            前端插件datatables.js需要的返回值
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.TableResult.data">
            <summary>
            表格内容
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.TableResult.draw">
            <summary>
            本次会话的请求次数
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.TableResult.recordsTotal">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Newcats.JobManager.Api.Models.TableResult.recordsFiltered">
            <summary>
            筛选记录数
            </summary>
        </member>
        <member name="M:Newcats.JobManager.Api.Models.TableResult.#ctor(System.Collections.Generic.List{System.Object[]},System.Int32,System.Int32)">
            <summary>
            前端插件datatables.js需要的返回值
            </summary>
            <param name="data">表格内容</param>
            <param name="draw">本次会话的请求次数</param>
            <param name="totalCounts">总记录数</param>
        </member>
    </members>
</doc>
